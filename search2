
# 最简单的 full search request
GET /megacorp/employee/_search
{
    "query": {
        "match": {
            "about": "build"
        }
    }
}

# 没有条件限制，查询所有的document，但一次只是会返回10条document
GET /megacorp/employee/_search
{
    "query": {
        "match_all": {}
    }
}

# There are two DSLs: the query DSL and the filter DSL.
# A filter asks a yes|no question of every document and is used for fields that contain exact values.
# A query asks the question: How well does this document match?

# filter
# 查询所有age是25的document
GET /megacorp/employee/_search
{
    "query": {
        "term": {
            "age": 25
        }
    }
}
# 由于这个查询只有filter clause，没有query clause，所以max_score是1.0，所有匹配document的_score都是1.0.
# 注意filter查询的条件只能作用于exact value的field，不能作用于full text

# terms filter，下面的查询，age是25或32的都满足filter条件
GET /megacorp/employee/_search
    {
    "query": {
        "terms": {
            "age": [25, 32]
        }
    }
} 

# range filter, 注意term关键字被range取代了，查询满足 34 < age < 100 的document. 
GET /megacorp/employee/_search
{
    "query": {
        "range": {
            "age": {
                "gt": 34,
                "lt": 100
            }
        }
    }
}
# 所有范围关键字如下所示：
# gt: Greater than
# gte: Greater than or equal to
# lt: Less than
# lte: Less than or equal to


# exists filter， 查询extend_field存在的所有document
GET /megacorp/employee/_search
{
    "query": {
        "exists": {
            "field": "extend_field"
        }
    }
}


# bool filter
GET /megacorp/employee/_search
{
    "query": {
        "bool": {
            "must": [
                {
                    "term": {
                        "age": 88
                    }
                }
            ],
            "must_not": [
                {
                    "exists": {
                        "field": "extend_field"
                    }
                }
            ],
            "should": [
                {
                    "range": {
                        "salary": {
                            "gt": 1000
                        }
                    }
                },
                {
                    "range": {
                        "level": {
                            "gt": 5
                        }
                    }
                }
            ]
        }
    }
}
# must like and. must_not like not. should like or.
# 但是should子句跟预期的并不一样，按照书中的解释，上面的查询应该等价于：(age == 88) && !(extend_field exists) && (salary > 1000 || level > 5)
# 然而结果并不是这样,即使不满足(salary > 1000 || level > 5)这个条件的document也在结果中，而且查询结果中所有document的_score值都是1.0
# 只是满足should条件的document排在查询结果的前面，不满足的排在查询结果的后面。




# query

# 使用match代替term，注意原来的tearm被替换成了match，结果一样，所有结果的_score值都是1.0
GET /megacorp/employee/_search
{
    "query": {
        "match": {
            "age": 88
        }
    }
}

# multi_match, 同时在多个field中查询关键字。查询first_name和about两个field中包含build关键字的document
GET /megacorp/employee/_search
{
    "query": {
        "multi_match": {
            "query": "build",
            "fields": ["first_name", "about"]
        }
    }
}


# bool query
GET /megacorp/employee/_search
{
    "query": {
        "bool": {
            "must": [
                {
                    "match": {
                        "first_name": "zhang"
                    }
                }
            ],
            "must_not": [
                {
                    "match": {
                        "last_name": "liang"
                    }
                }
            ],
            "should": [
                {
                    "match": {
                        "age": 35
                    }
                },
                {
                    "range": {
                        "salary": {
                            "gt": 0
                        }
                    }
                }
            ]
        }
    }
}
# must: Clauses that must match for the document to be included.
# must_not: Clauses that must not match for the document to be included.
# should: If these clauses match, they increase the _score; otherwise, they have no effect.
# should are simply used to refine the relevance score for each document.




# Combining Queries with Filters
# 过滤查询已被弃用，并在ES 5.0中删除, 现在已经没有filtered关键字了。
# 所以也就没有bool filter了，这也就说明了为什么上面bool filter should clause结果与预期不符。
# 在bool query中使用filter进行过滤
GET /megacorp/employee/_search
{
    "query": {
        "bool": {
            "filter": {
                "range": {
                    "age": {
                        "lt": 40
                    }
                }
            }, 
            "must": [
                {
                    "match": {
                        "first_name": "zhang"
                    }
                }
            ],
            "must_not": [
                {
                    "match": {
                        "last_name": "liang"
                    }
                }
            ]
        }
    }
}


# sort, 查询结果根据age字段正向排序
GET /megacorp/employee/_search
{
    "query": {
        "bool": {
            "must": [
                {
                    "match": {
                        "first_name": "zhang"
                    }
                }
            ],
            "must_not": [
                {
                    "match": {
                        "last_name": "liang"
                    }
                }
            ]
        }
    },
    "sort": [
        {
            "age": {
                "order": "asc"
            }
        }
    ]
}
# The _score is not calculated, because it is not being used for sorting. 不再计算score，因为不用。
# 结果中多了一个sort字段


# 可以按多个字段排序
"sort": [
    {
        "age": {
            "order": "asc"
        }
    },
    {
        "salary": {
            "order": "desc"
        }
    }
]