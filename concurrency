# 确保我们是在create一个新的document，而不是在覆盖一个已存在的document，相当于在create时加了乐观锁。有下面两种方法
# 第一种方式
PUT /test_alias_v1/my_type/8?op_type=create
{
    "title": "test create"
}

# 第二种方式
PUT /test_alias_v1/my_type/9/_create
{
    "title": "test create"
}

# 加锁创建一条document，此时document的_version字段时1
PUT /website/blog/1/_create
{
    "title": "My first blog entry",
    "text": "Just trying this out..."
}

# 加乐观锁更新此document，此时此时document的_version字段时2
PUT /website/blog/1?version=1
{
    "title": "My first blog entry",
    "text": "Starting to get the hang of this..."
}

# 上面document的_version值都是ES内部生成的，可以使用外部值作为_version，例如DB中的update_time
# 当使用version_type=external参数update一条document时，ES不是检查version参数的值是否跟document当前的_version相同，而是检查version参数的值是否大于document的_version
# 下面的命令创建一条新的document，这种形式不能使用_create锁，也没必要使用_create锁
PUT /website/blog/2/?version=5&version_type=external
{   
    "title": "My first external blog entry",
    "text": "Starting to get the hang of this..."
}

# 更新这个document，注意version参数的值一定要大于document当前的_version
PUT /website/blog/2/?version=10&version_type=external
{
    "title": "My first external blog entry",
    "text": "Starting to get the hang of this..."
}

# 使用_update endpoint 可以部分更新一个document
# 在原来document基础上增加两个新的field
POST /website/blog/1/_update
{
    "doc" : {
        "tags" : [ "testing" ],
        "views": 0
    }
}

# 将document中的views字段更新为1，其它保持不变
POST /website/blog/1/_update
{
    "doc" : {
        "views": 1
    }
}

# Using Scripts to Make Partial Updates，对原来的views字段加1
POST /website/blog/1/_update
{
    "script" : "ctx._source.views+=1"
}

# 加retry_on_conflict参数，当update发生冲突时，自动重试5次
POST /website/pageviews/1/_update?retry_on_conflict=5
{
    "script" : "ctx._source.views+=1",
    "upsert": {
        "views": 0
    }
}